package com.berlski.tool.custom.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.berlski.tool.custom.dao.bean.Dictionary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DICTIONARY_ID".
*/
public class DictionaryDao extends AbstractDao<Dictionary, Void> {

    public static final String TABLENAME = "DICTIONARY_ID";

    /**
     * Properties of entity Dictionary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type = new Property(0, String.class, "type", false, "TYPE");
        public final static Property DictionaryType = new Property(1, String.class, "dictionaryType", false, "DICTIONARY_TYPE");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
        public final static Property Key = new Property(4, String.class, "key", false, "KEY");
        public final static Property Mark = new Property(5, String.class, "mark", false, "MARK");
        public final static Property Desc = new Property(6, String.class, "desc", false, "DESC");
        public final static Property IsCheck = new Property(7, boolean.class, "isCheck", false, "IS_CHECK");
    }


    public DictionaryDao(DaoConfig config) {
        super(config);
    }
    
    public DictionaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DICTIONARY_ID\" (" + //
                "\"TYPE\" TEXT," + // 0: type
                "\"DICTIONARY_TYPE\" TEXT," + // 1: dictionaryType
                "\"ID\" TEXT," + // 2: id
                "\"VALUE\" TEXT," + // 3: value
                "\"KEY\" TEXT," + // 4: key
                "\"MARK\" TEXT," + // 5: mark
                "\"DESC\" TEXT," + // 6: desc
                "\"IS_CHECK\" INTEGER NOT NULL );"); // 7: isCheck
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DICTIONARY_ID_ID_DESC_DICTIONARY_TYPE_DESC ON \"DICTIONARY_ID\"" +
                " (\"ID\" DESC,\"DICTIONARY_TYPE\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DICTIONARY_ID\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dictionary entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        String dictionaryType = entity.getDictionaryType();
        if (dictionaryType != null) {
            stmt.bindString(2, dictionaryType);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(5, key);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(6, mark);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
        stmt.bindLong(8, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dictionary entity) {
        stmt.clearBindings();
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(1, type);
        }
 
        String dictionaryType = entity.getDictionaryType();
        if (dictionaryType != null) {
            stmt.bindString(2, dictionaryType);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(4, value);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(5, key);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(6, mark);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
        stmt.bindLong(8, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Dictionary readEntity(Cursor cursor, int offset) {
        Dictionary entity = new Dictionary( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dictionaryType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // value
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // key
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // desc
            cursor.getShort(offset + 7) != 0 // isCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dictionary entity, int offset) {
        entity.setType(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDictionaryType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsCheck(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Dictionary entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Dictionary entity) {
        return null;
    }

    @Override
    public boolean hasKey(Dictionary entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
